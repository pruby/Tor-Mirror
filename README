
'tor' is an implementation of The Onion Routing system, as
described in a bit more detail at http://www.onion-router.net/. You
can read list archives, and subscribe to the mailing list, at
http://archives.seul.org/or/dev/.

Is your question in the FAQ? Should it be?

**************************************************************************
See the INSTALL file for a quickstart. That is all you will probably need.
**************************************************************************

**************************************************************************
You only need to look beyond this point if the quickstart in the INSTALL
doesn't work for you.
**************************************************************************

Do you want to run a tor server?

  First, set up a config file for your node (start with sample-orrc and
  edit the top portion). Then run the node (as above, but with the new
  config file) to generate keys. One of the generated files is your
  'fingerprint' file.  Mail it to arma@mit.edu. Remember that you won't
  be able to authenticate to the other tor nodes until I've added you
  to the directory.

Command-line web browsing:

  (First, install and configure Privoxy as described in INSTALL.)
  For more convenient command-line use, I recommend making a ~/.wgetrc
  with the line
    http_proxy=http://localhost:8118
  Then you can do things like "wget seul.org" and watch as it downloads
  from the onion routing network.

  For fun, you can wget a very large file (a megabyte or more), and
  then ^z the wget a little bit in. The onion routers will continue
  talking for a while, queueing around 500k in the kernel-level buffers.
  When the kernel buffers are full, and the outbuf for the AP connection
  also fills, the internal congestion control will kick in and the exit
  connection will stop reading from the webserver. The circuit will
  wait until you fg the wget -- and other circuits will work just fine
  throughout. Then try ^z'ing the onion routers, and watch how well it
  recovers. Then try ^z'ing several of them at once. :)

How to use it for ssh:

  Download tsocks (tsocks.sourceforge.net) and configure it to talk to
  localhost:9050 as a socks4 server. My /etc/tsocks.conf simply has:
    server_port = 9050
    server = 127.0.0.1
  (I had to "cd /usr/lib; ln -s /lib/libtsocks.so" to get the tsocks
   library working after install, since my libpath didn't include /lib.)
  Then you can do "tsocks ssh arma@moria.mit.edu". But note that if
  ssh is suid root, you either need to do this as root, or cp a local
  version of ssh that isn't suid.

