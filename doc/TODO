$Id$
Legend:
SPEC!!  - Not specified
SPEC    - Spec not finalized
N       - nick claims
R       - arma claims
P       - phobos claims
        - Not done
        * Top priority
        . Partially done
        o Done
        d Deferrable
        D Deferred
        X Abandoned

Things we'd like to do in 0.2.0.x:
  - See also Flyspray tasks.
  - See also all items marked XXXX020 and DOCDOC in the code
  - http://tor.eff.org/eff/legal-faq.html#License doesn't mention
    licenses for other components of the bundles.

  - Before the feature freeze:
    - Support for preconfigured mirror lists
    - Download consensuses (et al) via if-modified-since
    - Saner TLS rotation
    - base Guard flag on WFU rather than or in addition to MTBF
    - 118 if feasible and obvious
    - Maintain a skew estimate and use ftime consistently.
    - 105+TLS, if possible.

  - windows users who are one week in the past can be given any
    consensus between then and now and they'll consider it "live"
    and use it.

  - if you load (nick says receive/set/anything) a consensus that's
    in the future, then log about skew. this is for clients that live
    a week in the past: they grab a consensus and complain about skew,
    but tor works! and it's not for a day or so that it stops working,
    at which point they won't try doing any dir requests so they won't
    see any further skew complaints.

  - should change the "skew complaint" to specify in largest units
    rather than just seconds.

  - get more v3 authorities before 0.2.0.x comes out.
    - brainstorm about who those should be

  - Bugs.
     - Bug reports Roger has heard along that way that don't have enough
        details/attention to solve them yet.
        - tup said that when he set FetchUselessDescriptors, after
          24 or 48 hours he wasn't fetching any descriptors at all
          anymore. This was in 0.2.0 but worked fine in 0.1.2.
        - arma noticed that when his network went away and he tried
          a new guard node and the connect() syscall failed to it,
          the guard wasn't being marked as down. 0.2.0.x.
        - after being without network for 12 hours, arma's tor decided
          it couldn't fetch any network statuses, and never tried again
          even when the network came back and arma clicked on things.
          also 0.2.0.
        - phobos says relaybandwidth* sometimes don't do what we expect.
          http://interloper.org/tmp/2007-06-bw-usage.png
        - this notion of authorities notifying servers that they're
          unreachable is bunk -- it's leftover from the time when all
          servers ran 24/7. now it triggers every time a server goes
          away and then returns before the old descriptor has expired.
      - add a --quiet commandline option that suppresses logs. useful
        for --hashed-password and maybe others.
      - Tor logs the libevent version on startup, for debugging purposes.
        This is great. But it does this before configuring the logs, so
        it only goes to stdout and is then lost.
      - we should do another bandwidth test every 12 hours or something
        if we're showing less than 50KB and our bandwidthrate says we can
        do more than that. I think some servers are forgetting the results
        of their first test, and then never seeing use.

  - Proposals:
    . 101: Voting on the Tor Directory System (plus 103)
      - Handle badly timed certificates properly.
      . Start caching consensus documents once authorities make them;
        start downloading consensus documents once caches serve
        them
        o Code to delay next download while fetching certificates to verify
          a consensus we already got.
        o Code to retry consensus download if we got one we already have.
        - Use if-modified-since on consensus download
        - Use if-modified-since on certificate download
      - Controller support
        - GETINFO to get consensus
        - Event when new consensus arrives
    - 105: Version negotiation for the Tor protocol
    . 111: Prioritize local traffic over relayed.
      - Merge into tor-spec.txt.

  - Refactoring:
    . Make cells get buffered on circuit, not on the or_conn.
      . Switch to pool-allocation for cells?
        - Benchmark pool-allocation vs straightforward malloc.
        - Adjust memory allocation logic in pools to favor a little less
          slack memory.
    . Remove socketpair-based bridges conns, and the word "bridge".  (Use
      shared (or connected) buffers for communication, rather than sockets.)
      . Implement
        - Handle rate-limiting on directory writes to linked directory
          connections in a more sensible manner.
        - Find more ways to test this.
    - Have clients do TLS connection rotation less often than "every 10
      minutes" in the thrashy case, and more often than "once a week" in the
      extra-stable case.
    - Streamline how we pick entry nodes: Make choose_random_entry() have
      less magic and less control logic.
    - Refactor networkstatus generation:
      - Include "v" line in getinfo values.

  - Bridges:
    . Bridges users (rudimentary version)
      o Ability to specify bridges manually
      o Config option 'UseBridges' that bridge users can turn on.
        o uses bridges as first hop rather than entry guards.
      o if you don't have any routerinfos for your bridges, or you don't
        like the ones you have, ask a new bridge for its server/authority.
      . Ask all directory questions to bridge via BEGIN_DIR.
        - use the bridges for dir fetches even when our dirport is open.
R     - drop 'authority' queries if they're to our own identity key; accept
        them otherwise.
      X Design/implement the "local-status" or something like it, from the
        "Descriptor purposes: how to tell them apart" section of
        http://archives.seul.org/or/dev/May-2007/msg00008.html
      o timeout and retry schedules for fetching bridge descriptors
      - give extend_info_t a router_purpose again
      o react faster to download networkstatuses after the first bridge
        descriptor arrives
      o be more robust to bridges being marked as down and leaving us
        stranded without any known "running" bridges.
    - Bridges operators (rudimentary version)
      - Ability to act as dir cache without a dir port.
      o Bridges publish to bridge authorities
      o Fix BEGIN_DIR so that you connect to bridge of which you only
        know IP (and optionally fingerprint), and then use BEGIN_DIR to learn
        more about it.
      - look at server_mode() and decide if it always applies to bridges too.
    - Bridges authorities (rudimentary version)
      o Rudimentary "do not publish networkstatus" option for bridge
        authorities.
      - Clients can ask bridge authorities for more bridges.
    - Bridges
      o Clients can ask bridge authorities for updates on known bridges.
      - More TLS normalization work: make Tor less easily
        fingerprinted.
      - Directory system improvements
    - Misc
      - Make BEGIN_DIR mandatory for asking questions of bridge authorities?

  - Features (other than bridges):
    - Blocking-resistance.
      - Write a proposal; make this part of 105.
    - Audit how much RAM we're using for buffers and cell pools; try to
      trim down a lot.
    - Base relative control socket paths on datadir.
    - We should ship with a list of stable dir mirrors -- they're not
      trusted like the authorities, but they'll provide more robustness
      and diversity for bootstrapping clients.
      - Implement this as a list of routerstatus, like fake_routerstatus in
        trusted_dir_derver_t?
    - Better estimates in the directory of whether servers have good uptime
       (high expected time to failure) or good guard qualities (high
       fractional uptime).
     - AKA Track uptime as %-of-time-up, as well as time-since-last-down
       o Implement tracking
       - Make uptime info persist too.
       - Base Guard on weighted fractional uptime.
    - Make TrackHostExits expire TrackHostExitsExpire seconds after their
       *last* use, not their *first* use.
    - Limit to 2 dir, 2 OR, N SOCKS connections per IP.
     - Or maybe close connections from same IP when we get a lot from one.
     - Or maybe block IPs that connect too many times at once.
    - add an AuthDirBadexit torrc option if we decide we want one.

  - Testing
N   - Hack up a client that gives out weird/no certificates, so we can
      test to make sure that this doesn't cause servers to crash.

  - Deprecations:
    - can we deprecate 'getinfo network-status'?
    - can we deprecate the FastFirstHopPK config option?

  - Documentation
    - HOWTO for DNSPort.
    - Quietly document NT Service options
    - More prominently, we should have a recommended apps list.
      - recommend pidgin (gaim is renamed)
      - unrecommend IE because of ftp:// bug.
    - we should add a preamble to tor-design saying it's out of date.
    . Document transport and natdport in a good HOWTO.
    - Publicize torel.  (What else?
    . Finish path-spec.txt

P - Packaging:
P   - Can we switch to polipo?  Please?
P    - Make documentation realize that location of system configuration file
      will depend on location of system defaults, and isn't always /etc/torrc.
P   - If we haven't replaced privoxy, lock down its configuration in all
      packages, as documented in tor-doc-unix.html
P - Figure out why dll's compiled in mingw don't work right in WinXP.
P - Create packages for Nokia 800, requested by Chris Soghoian
P - Consider creating special Tor-Polipo-Vidalia test packages,
    requested by Dmitri Vitalev
  o Get Vidalia supporting protocolinfo and using auth by default.
P - create a "make win32-bundle" for vidalia-privoxy-tor-torbutton
  bundle

Nice-to-have items for 0.2.0.x, time permitting:
  - Proposals
    - 113: Simplifying directory authority administration
    - 110: prevent infinite-length circuits (phase one)
    . Robust decentralized storage for hidden service descriptors.
      (Karsten is working on this; proposal 114.)
    - 118: Listen on and advertise multiple ports:
      - Tor should be able to have a pool of outgoing IP addresses that it is
        able to rotate through. (maybe.  Possible overlap with proposal 118.)
      - config option to publish what ports you listen on, beyond
        ORPort/DirPort.  It should support ranges and bit prefixes (?) too.
        (This is very similar to proposal 118.)
    - 117: IPv6 Exits
      - Internal code support for ipv6:
        o Clone ipv6 functions (inet_ntop, inet_pton) where they don't exist.
        - Most address variables need to become tor_addr_t
        - Teach resolving code how to handle ipv6.
        - Teach exit policies about ipv6 (consider ipv4/ipv6 interaction!)

  - Features
    - Let controller set router flags for authority to transmit, and for
      client to use.
    - add an 'exit-address' line in the descriptor for servers that exit
      from something that isn't their published address.
    - Clients should estimate their skew as median of skew from servers
      over last N seconds.
    - More work on AvoidDiskWrites?

  - Protocol work
    - MAYBE kill stalled circuits rather than stalled connections.  This is
      possible thanks to cell queues, but we need to consider the anonymity
      implications.
    - Implement TLS shutdown properly when possible.

  - Low-priority bugs:
    - we try to build 4 test circuits to break them over different
      servers. but sometimes our entry node is the same for multiple
      test circuits. this defeats the point.
    - If the client's clock is too far in the past, it will drop (or just not
      try to get) descriptors, so it'll never build circuits.

  - Refactoring:
    - Move all status info out of routerinfo into local_routerstatus.  Make
      "who can change what" in local_routerstatus explicit.  Make
      local_routerstatus (or equivalent) subsume all places to go for "what
      router is this?"

  - Build:
    - Detect correct version of libraries from autoconf script.

  - Documentation:
    - Review torrc.sample to make it more discursive.

Deferred from 0.2.0.x:
  - Features
    - Make a TCP DNSPort
  - Refactoring
    - Make resolves no longer use edge_connection_t unless they are actually
      _on_ a socks connection: have edge_connection_t and (say)
      dns_request_t both extend an edge_stream_t, and have p_streams and
      n_streams both be linked lists of edge_stream_t.
    - Generate torrc.{complete|sample}.in, tor.1.in, the HTML manual, and the
      online config documentation from a single source.
  - Blocking/scanning-resistance
    - It would be potentially helpful to https requests on the OR port by
      acting like an HTTPS server.
    - Do we want to maintain our own set of entryguards that we use as
      next hop after the bridge? Open research question; let's say no
      for 0.2.0 unless we learn otherwise.
    - Should do reachability testing but only on the purpose==bridge
      descriptors we have.
    - Some mechanism for specifying that we want to stop using a cached
      bridge.


Future versions:
  - See also Flyspray tasks.
  - See also all OPEN/ACCEPTED proposals.
  - See also all items marked XXXX and FFFF in the code.

  - Protocol:
    - Our current approach to block attempts to use Tor as a single-hop proxy
      is pretty lame; we should get a better one.
    - Allow small cells and large cells on the same network?
    - Cell buffering and resending. This will allow us to handle broken
      circuits as long as the endpoints don't break, plus will allow
      connection (tls session key) rotation.
    - Implement Morphmix, so we can compare its behavior, complexity,
      etc.  But see paper breaking morphmix.
    - Other transport. HTTP, udp, rdp, airhook, etc. May have to do our own
      link crypto, unless we can bully DTLS into it.
    - Need a relay teardown cell, separate from one-way ends.
      (Pending a user who needs this)
    - Handle half-open connections: right now we don't support all TCP
      streams, at least according to the protocol. But we handle all that
      we've seen in the wild.
      (Pending a user who needs this)

  - Directory system
    - BEGIN_DIR items
      - turn the received socks addr:port into a digest for setting .exit
      - handle connect-dir streams that don't have a chosen_exit_name set.
    - Have a "Faster" status flag that means it. Fast2, Fast4, Fast8?
    - Add an option (related to AvoidDiskWrites) to disable directory
      caching.  (Is this actually a good idea??)
    - Add d64 and fp64 along-side d and fp so people can paste status
      entries into a url. since + is a valid base64 char, only allow one
      at a time. Consider adding to controller as well.
    - Some back-out mechanism for auto-approval on authorities
      - a way of rolling back approvals to before a timestamp
        - Consider minion-like fingerprint file/log combination.
    - Have new people be in limbo and need to demonstrate usefulness
      before we approve them.

  - Hidden services:
    - Standby/hotswap/redundant hidden services.
    . Update the hidden service stuff for the new dir approach.  (Much
      of this will be superseded by 114.)
      - switch to an ascii format, maybe sexpr?
      - authdirservers publish blobs of them.
      - other authdirservers fetch these blobs.
      - hidserv people have the option of not uploading their blobs.
      - you can insert a blob via the controller.
      - and there's some amount of backwards compatibility.
      - teach clients, intro points, and hidservs about auth mechanisms.
      - come up with a few more auth mechanisms.
    - auth mechanisms to let hidden service midpoint and responder filter
      connection requests.
    - Let each hidden service (or other thing) specify its own
      OutboundBindAddress?
    - Hidserv offerers shouldn't need to define a SocksPort

  - Server operation
    - When we notice a 'Rejected: There is already a named server with
      this nickname' message... or maybe instead when we see in the
      networkstatuses that somebody else is Named with the name we
      want: warn the user, send a STATUS_SERVER message, and fall back
      to unnamed.
    - If the server is spewing complaints about raising your ulimit -n,
      we should add a note about this to the server descriptor so other
      people can notice too.
    - When we hit a funny error from a dir request (eg 403 forbidden),
      but tor is working and happy otherwise, and we haven't seen many
      such errors recently, then don't warn about it.

  - Controller
    - A way to adjust router flags from the controller.  (How do we
      prevent the authority from clobbering them soon afterward?)
    - Implement missing status events and accompanying getinfos
      - DIR_REACHABLE
      - BAD_DIR_RESPONSE (Unexpected directory response; maybe we're behind
        a firewall.)
      - BAD_PROXY (Bad http or https proxy)
      - UNRECOGNIZED_ROUTER (a nickname we asked for is unavailable)
      - Status events related to hibernation
      - something about failing to parse our address?
        from resolve_my_address() in config.c
      - sketchy OS, sketchy threading
      - too many onions queued: threading problems or slow CPU?
    - Implement missing status event fields:
      - TIMEOUT on CHECKING_REACHABILITY
    - GETINFO status/client, status/server, status/general: There should be
      some way to learn which status events are currently "in effect."
      We should specify which these are, what format they appear in, and so
      on.
    - More information in events:
      - Include bandwidth breakdown by conn->type in BW events.
      - Change circuit status events to give more details, like purpose,
        whether they're internal, when they become dirty, when they become
        too dirty for further circuits, etc.
      - Change stream status events analogously.
    - Expose more information via getinfo:
      - import and export rendezvous descriptors
      - Review all static fields for additional candidates
    - Allow EXTENDCIRCUIT to unknown server.
      - We need some way to adjust server status, and to tell tor not to
        download directories/network-status, and a way to force a download.
      - Make everything work with hidden services

  - Performance/resources
    - per-conn write buckets
    - separate config options for read vs write limiting
      (It's hard to support read > write, since we need better
       congestion control to avoid overfull buffers there.  So,
       defer the whole thing.)
    - Investigate RAM use in directory authorities.
    - Look into pulling serverdescs off buffers as they arrive.
    - Rate limit exit connections to a given destination -- this helps
      us play nice with websites when Tor users want to crawl them; it
      also introduces DoS opportunities.
    - Consider truncating rather than destroying failed circuits,
      in order to save the effort of restarting.  There are security
      issues here that need thinking, though.
    - Handle full buffers without totally borking
    - Rate-limit OR and directory connections overall and per-IP and
      maybe per subnet.

  - Misc
    - Hold-open-until-flushed now works by accident; it should work by
      design.
    - Display the reasons in 'destroy' and 'truncated' cells under
      some circumstances?
    - Make router_is_general_exit() a bit smarter once we're sure what
      it's for.
    - Automatically determine what ports are reachable and start using
      those, if circuits aren't working and it's a pattern we
      recognize ("port 443 worked once and port 9001 keeps not
      working").

  - Security
    - some better fix for bug #516?
    - don't do dns hijacking tests if we're reject *:* exit policy?
      (deferred until 0.1.1.x is less common)
    - Directory guards
    - Mini-SoaT:
      - Servers might check certs for known-good ssl websites, and if
        they come back self-signed, declare themselves to be
        non-exits.  Similar to how we test for broken/evil dns now.
      - Authorities should try using exits for http to connect to some
        URLS (specified in a configuration file, so as not to make the
        List Of Things Not To Censor completely obvious) and ask them
        for results.  Exits that don't give good answers should have
        the BadExit flag set.
      - Alternatively, authorities should be able to import opinions
        from Snakes on a Tor.
    - More consistent error checking in router_parse_entry_from_string().
      I can say "banana" as my bandwidthcapacity, and it won't even squeak.
    - Bind to random port when making outgoing connections to Tor servers,
      to reduce remote sniping attacks.
    - Audit everything to make sure rend and intro points are just as
      likely to be us as not.
    - Do something to prevent spurious EXTEND cells from making
      middleman nodes connect all over.  Rate-limit failed
      connections, perhaps?
    - DoS protection: TLS puzzles, public key ops, bandwidth exhaustion.

  - Bridges
    - Tolerate clock skew on bridge relays.

  - Needs thinking
    - Now that we're avoiding exits when picking non-exit positions,
      we need to consider how to pick nodes for internal circuits. If
      we avoid exits for all positions, we skew the load balancing. If
      we accept exits for all positions, we leak whether it's an
      internal circuit at every step. If we accept exits only at the
      last hop, we reintroduce Lasse's attacks from the Oakland paper.

  - Windows server usability
    - Solve the ENOBUFS problem.
      - make tor's use of openssl operate on buffers rather than sockets,
        so we can make use of libevent's buffer paradigm once it has one.
      - make tor's use of libevent tolerate either the socket or the
        buffer paradigm; includes unifying the functions in connect.c.
    - We need a getrlimit equivalent on Windows so we can reserve some
      file descriptors for saving files, etc. Otherwise we'll trigger
      asserts when we're out of file descriptors and crash.
    - Merge code from Urz into libevent
    - Make Tor use evbuffers.

  - Documentation
    - a way to generate the website diagrams from source, so we can
      translate them as utf-8 text rather than with gimp. (svg? or
      imagemagick?)
    . Flesh out options_description array in src/or/config.c
    . multiple sample torrc files
    . figure out how to make nt service stuff work?
      . Document it.
    - Refactor tor man page to divide generally useful options from
      less useful ones?
    - Add a doxygen style checker to make check-spaces so nick doesn't drift
       too far from arma's undocumented styleguide.  Also, document that
       styleguide in HACKING.  (See r9634 for example.)
       - exactly one space at beginning and at end of comments, except i
         guess when there's line-length pressure.
       - if we refer to a function name, put a () after it.
       - only write <b>foo</b> when foo is an argument to this function.
       - doxygen comments must always end in some form of punctuation.
       - capitalize the first sentence in the doxygen comment, except
         when you shouldn't.
       - avoid spelling errors and incorrect comments. ;)

  - Packaging
    - The Debian package now uses --verify-config when (re)starting,
      to distinguish configuration errors from other errors. Perhaps
      the RPM and other startup scripts should too?
    - add a "default.action" file to the tor/vidalia bundle so we can
      fix the https thing in the default configuration:
      http://wiki.noreply.org/noreply/TheOnionRouter/TorFAQ#PrivoxyWeirdSSLPort

  - Related tools
    - Patch privoxy and socks protocol to pass strings to the browser.


Documentation, non-version-specific.
  - Specs
    - Mark up spec; note unclear points about servers
NR  - write a spec appendix for 'being nice with tor'
    - Specify the keys and key rotation schedules and stuff
  - Mention controller libs someplace.
  - Remove need for HACKING file.
P - document http://wiki.noreply.org/noreply/TheOnionRouter/TransparentProxy on freebsd and osx
P - figure out why x86_64 won't build rpms from tor.spec
P - figure out spec files for bundles of vidalia-tor-polipo
P - figure out polipo install scripts for bundles of vidalia-tor-polipo on osx, win32
P - figure out selinux policy for tor
P - change packaging system to more automated and specific for each
     platform, suggested by Paul Wouter
P - Setup repos for redhat and suse rpms & start signing the rpms the
    way package management apps prefer

Website:
P  - tor-in-the-media page
  X more pictures from ren. he wants to describe the tor handshake
  - Figure out licenses for website material.
P  - put the logo on the website, in source form, so people can put it on
    stickers directly, etc.
P  - put the source image for the stickers on the website, so people can
    print their own
P - figure out a license for the logos and docs we publish
R - make a page with the hidden service diagrams.
P  - ask Jan/Jens to be the translation coordinator? add to volunteer page.
  - add a page for localizing all tor's components.
  - It would be neat if we had a single place that described _all_ the
    tor-related tools you can use, and what they give you, and how well they
    work.  Right now, we don't give a lot of guidance wrt
    torbutton/foxproxy/privoxy/polipo in any consistent place.
  - the tor mirror pages are probably still mirroring from tor.eff.org.
    Get them to switch, and maybe remove the ones that haven't switched?
