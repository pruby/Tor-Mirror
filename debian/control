Source: tor
Section: comm
Priority: optional
Maintainer: Peter Palfrader <weasel@debian.org>
Build-Depends: debhelper (>= 4.1.65), libssl-dev, dpatch
Standards-Version: 3.6.1

Package: tor
Architecture: any
Depends: ${shlibs:Depends}, adduser, tsocks
Recommends: tsocks
Suggests: mixmaster, mixminion, anon-proxy
Description: anonymizing overlay network for TCP
 Tor is a connection-based low-latency anonymous communication system which
 addresses many flaws in the original onion routing design.
 .
 In brief, Onion Routing is a connection-oriented anonymizing communication
 service. Users choose a source-routed path through a set of nodes, and
 negotiate a "virtual circuit" through the network, in which each node
 knows its predecessor and successor, but no others. Traffic flowing down
 the circuit is unwrapped by a symmetric key at each node, which reveals
 the downstream node.
 .
 Basically Tor provides a distributed network of servers ("onion
 routers"). Users bounce their tcp streams (web traffic, ftp, ssh, etc)
 around the routers, and recipients, observers, and even the routers
 themselves have difficulty tracking the source of the stream.
 .
 Note that Tor does no protocol cleaning.  That means there is a danger that
 application protocols and associated programs can be induced to reveal
 information about the initiator.  Tor depends on Privoxy and similar protocol
 cleaners to solve this problem.
 .
 Client applications can use the Tor network by connecting to the local
 onion proxy.  If the application itself does not come with socks support
 you can use a socks client such as tsocks.  Some web browsers like mozilla
 and web proxies like privoxy come with socks support, so you don't need an
 extra socks client if you want to use Tor with them.
 .
 Remember that this is alpha code, and the network is very small -- Tor will
 not provide anonymity currently.
